#!/usr/bin/env python

from optparse import OptionParser
import os
import sys
from Bio import SeqIO
from Bio.Seq import Seq
from Bio.SeqRecord import SeqRecord

class SeqRange:
    def __init__(self, str, radius=0):
        self.name = str
        self.first = 1
        self.last = 0
        self.radius = radius
        self.whole = True
        colon = str.rfind(':')
        if colon >= 0:
            self.whole = False
            self.name = str[:colon]
            range = str[colon+1:]
            firstLast = range.split("-")
            if firstLast[0]:
                self.first = int(firstLast[0])
            if len(firstLast) > 1:
                self.last = int(firstLast[1])
            else:
                self.last = self.first
    def start(self):
        return self.first - self.radius

    def end(self):
        return self.last + self.radius

    def __str__(self):
        if self.whole:
            return self.name
        else:
            return "%s:%d-%d" % (self.name, self.first-self.radius, self.last+self.radius)

class Fasta:
    def __init__(self, file):
        self.records = [r for r in SeqIO.parse(file, "fasta")]
        self.recordIndex = {}
        for r in self.records:
            self.recordIndex[r.name] = r

    def getRange(self, range_spec, radius=0, rc=False):
        if range_spec in self.recordIndex:
            element = self.recordIndex[range_spec]
            seq = element.seq
            name = range_spec
        else:
            range = SeqRange(range_spec, radius)
            element = self.recordIndex[range.name]
            if range.last == 0:
                range.last = len(element)
            first = max(range.start(), 1)
            last = min(range.end(), len(element))
            seq = element.seq[first-1:last]
            name = str(range)
        if rc:
            seq = seq.reverse_complement()
            name += 'rc'
        record = SeqRecord(seq, id=name, description='')
        return record

#######################################

parser = OptionParser("""usage: %prog file.fasta range1 [range2 ...]

Ranges are of the form: scaffold00001:22397-22431""")

parser.add_option("--radius", "-r", type='int', default=0,
                  help="radius to extend range by (flanks)")
parser.add_option("--rc", "-c", action='store_true',
                  help="Reverse-complement output")

(options, args) = parser.parse_args()

if len(args) < 2:
    parser.print_help()
    print("usage: fastaget file.fasta range1 ...")
    sys.exit(1)

fasta = Fasta(args[0])
snippets = [fasta.getRange(a, options.radius, options.rc) for a in args[1:]]

SeqIO.write(snippets, sys.stdout, "fasta")

