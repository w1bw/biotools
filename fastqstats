#!/usr/bin/env python3

import sys
import gzip
import bz2
import pysam
from Bio import SeqIO
import numpy as np


def openSeqFile(fileName):
    """
    Open a sequence file with SeqIO; can be fasta or fastq with optional gz or bz2 compression.
    Assumes fasta unless ".fastq" or ".fq" in the file name.
    :param fileName:
    :return: SeqIO.parse object
    """

    components = fileName.split(".")

    if "bam" in components:
        file = pysam.AlignmentFile(fileName, "rb", check_header=False, check_sq=False)

        # generator for sequences in bam
        def bamSequences():
            for read in file.fetch(until_eof=True):
                if not read.is_qcfail:
                    yield read

        return bamSequences()

    if "bz2" in components:
        file = bz2.BZ2File(fileName, "rt")
    elif "gz" in components:
        file = gzip.open(fileName, "rt")
        SeqIO.parse(file, "fastq")
    else:
        file = open(fileName, "rt")
    if "fastq" in components or "fq" in components:
        fileType = "fastq"
    else:
        fileType = "fasta"
    return SeqIO.parse(file, fileType)


def readstats(read):
    length = len(read)
    q = np.array(read.letter_annotations["phred_quality"])
    eq = -10.0 * np.log10(np.mean(np.power(10.0, -q / 10.0)))
    return length, eq


def nfrac(readlengths, fraction):
    lengths = sorted(readlengths, reverse=True)
    total = sum(lengths)
    partial = count = 0
    target = total * fraction
    for length in lengths:
        partial += length
        count += 1
        if partial >= target:
            return length
    return 0


def longerthan(readlengths, length):
    return sum(filter(lambda x: x >= length, readlengths))


minsize = 0
print(
    "File                        Reads       Bases      >10kb      >20kb    Mean     N50     N10     Max    Qual"
)

for f in sys.argv[1:]:
    stats = [readstats(read) for read in openSeqFile(f) if len(read) >= minsize]
    lengths = [s[0] for s in stats]
    quals = [s[1] for s in stats]
    count = len(lengths)
    total = sum(lengths)
    n = 0
    longer10k = longerthan(lengths, 10000)
    longer20k = longerthan(lengths, 20000)
    n50 = nfrac(lengths, 0.5)
    n10 = nfrac(lengths, 0.1)
    results = (
        f,
        count,
        total,
        longer10k,
        longer20k,
        total / count,
        n50,
        n10,
        max(lengths),
        np.mean(quals),
    )
    print(
        f"{f:25s} {count:7d} {total:11d} {longer10k:10d} {longer20k:10d} {total/count:7.0f} {n50:7d} {n10:7d} {max(lengths):7d} {np.mean(quals):7.2f}"
    )
